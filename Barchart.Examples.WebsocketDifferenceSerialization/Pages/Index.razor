@page "/"
@using System.Net.WebSockets
@using System.Threading
@using Barchart.BinarySerializer.Schemas
@using Barchart.SerializationData;

@implements IDisposable

<h1>Websocket difference serialization example:</h1>
<h3>State: @webSocket.State</h3>

@if (webSocket.State == WebSocketState.Open)
{
    <h4>Bytes sent:</h4>
    <h6>@bytes</h6>
    <div>
        @if (marketData?.SubscriptionResponse != null)
        {
            <div>
                <h5>SubscriptionResponse:</h5>
                <p>Symbol: @marketData.SubscriptionResponse.Symbol</p>
                <p>CorrelationId: @marketData.SubscriptionResponse.CorrelationId</p>
                <p>MarketId: @marketData.SubscriptionResponse.MarketId</p>
                <p>Exchange: @marketData.SubscriptionResponse.Exchange</p>
                <p>ChannelId: @marketData.SubscriptionResponse.ChannelId</p>
                <p>NumberOfDefinitions: @marketData.SubscriptionResponse.NumberOfDefinitions</p>
                <p>Unsubscribe: @marketData.SubscriptionResponse.Unsubscribe</p>
                <p>SnapshotIntervalSeconds: @marketData.SubscriptionResponse.SnapshotIntervalSeconds</p>
            </div>
        }
        @if (marketData?.InstrumentDefinition != null)
        {
            <div>
                <h5>InstrumentDefinition:</h5>
                <p>MarketId: @marketData.InstrumentDefinition.MarketId</p>
                <p>BookDepth: @marketData.InstrumentDefinition.BookDepth</p>
                <p>VendorId: @marketData.InstrumentDefinition.VendorId</p>
                <p>Symbol: @marketData.InstrumentDefinition.Symbol</p>
                <p>Description: @marketData.InstrumentDefinition.Description</p>
            </div>
        }
        @if (marketData?.MarketSnapshot != null)
        {
            <div>
                <h5>MarketSnapshot:</h5>
                <p>MarketId: @marketData.MarketSnapshot.MarketId</p>
                <p>TransactionTime: @marketData.MarketSnapshot.TransactionTime</p>
                <p>MarketSequence: @marketData.MarketSnapshot.MarketSequence</p>
                <p>TradeDate: @marketData.MarketSnapshot.TradeDate</p>
            </div>
        }
        @if (marketData?.MarketUpdate != null)
        {
            <div>
                <h5>MarketUpdate:</h5>
                <p>MarketId: @marketData.MarketUpdate.MarketId</p>
                <p>Symbol: @marketData.MarketUpdate.Symbol</p>
                <p>TransactionTime: @marketData.MarketUpdate.TransactionTime</p>
                <p>DistributionTime: @marketData.MarketUpdate.DistributionTime</p>
                <p>MarketSequence: @marketData.MarketUpdate.MarketSequence</p>
                <p>SourceSequence: @marketData.MarketUpdate.SourceSequence</p>
            </div>
        }
    </div>
}

@code {
    CancellationTokenSource disposalTokenSource = new CancellationTokenSource();
    ClientWebSocket webSocket = new ClientWebSocket();
    MarketData marketData = new();
    int bytes = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await webSocket.ConnectAsync(new Uri("wss://localhost:7289/ws"), disposalTokenSource.Token);
            StateHasChanged();
            _ = ReceiveLoop();
        }
    }

    async Task ReceiveLoop()
    {
        Schema<MarketData> marketDataSchema = SchemaFactory.GetSchema<MarketData>();

        var buffer = new ArraySegment<byte>(new byte[10000]);
        while (!disposalTokenSource.IsCancellationRequested)
        {
            var received = await webSocket.ReceiveAsync(buffer, disposalTokenSource.Token);
            MarketData deserializedMarketData = marketDataSchema.Deserialize(buffer.ToArray());
            marketData = deserializedMarketData;
            bytes = received.Count;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        disposalTokenSource.Cancel();

        if (webSocket.State == WebSocketState.Open || webSocket.State == WebSocketState.CloseSent)
        {
            _ = webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Bye", CancellationToken.None);
        }
    }
}